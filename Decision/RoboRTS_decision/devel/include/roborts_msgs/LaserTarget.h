// Generated by gencpp from file roborts_msgs/LaserTarget.msg
// DO NOT EDIT!


#ifndef ROBORTS_MSGS_MESSAGE_LASERTARGET_H
#define ROBORTS_MSGS_MESSAGE_LASERTARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roborts_msgs/FVector.h>

namespace roborts_msgs
{
template <class ContainerAllocator>
struct LaserTarget_
{
  typedef LaserTarget_<ContainerAllocator> Type;

  LaserTarget_()
    : num_target(0)
    , num_points()
    , pose()
    , confidence()  {
    }
  LaserTarget_(const ContainerAllocator& _alloc)
    : num_target(0)
    , num_points(_alloc)
    , pose(_alloc)
    , confidence(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _num_target_type;
  _num_target_type num_target;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _num_points_type;
  _num_points_type num_points;

   typedef std::vector< ::roborts_msgs::FVector_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roborts_msgs::FVector_<ContainerAllocator> >::other >  _pose_type;
  _pose_type pose;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::roborts_msgs::LaserTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborts_msgs::LaserTarget_<ContainerAllocator> const> ConstPtr;

}; // struct LaserTarget_

typedef ::roborts_msgs::LaserTarget_<std::allocator<void> > LaserTarget;

typedef boost::shared_ptr< ::roborts_msgs::LaserTarget > LaserTargetPtr;
typedef boost::shared_ptr< ::roborts_msgs::LaserTarget const> LaserTargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborts_msgs::LaserTarget_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborts_msgs::LaserTarget_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roborts_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'roborts_msgs': ['/home/lichangheng/robo_ws/Decision/RoboRTS_decision/devel/share/roborts_msgs/msg', '/home/lichangheng/robo_ws/Decision/RoboRTS_decision/src/roborts_msgs/msg', '/home/lichangheng/robo_ws/Decision/RoboRTS_decision/src/roborts_msgs/msg/referee_system'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::LaserTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::LaserTarget_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::LaserTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::LaserTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::LaserTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::LaserTarget_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborts_msgs::LaserTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7a891f119d989835596adf70e8ef67b";
  }

  static const char* value(const ::roborts_msgs::LaserTarget_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7a891f119d98983ULL;
  static const uint64_t static_value2 = 0x5596adf70e8ef67bULL;
};

template<class ContainerAllocator>
struct DataType< ::roborts_msgs::LaserTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborts_msgs/LaserTarget";
  }

  static const char* value(const ::roborts_msgs::LaserTarget_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborts_msgs::LaserTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 num_target\n\
uint8[] num_points\n\
FVector[] pose\n\
float32[] confidence\n\
\n\
================================================================================\n\
MSG: roborts_msgs/FVector\n\
float32[] vector\n\
";
  }

  static const char* value(const ::roborts_msgs::LaserTarget_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborts_msgs::LaserTarget_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_target);
      stream.next(m.num_points);
      stream.next(m.pose);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaserTarget_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborts_msgs::LaserTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborts_msgs::LaserTarget_<ContainerAllocator>& v)
  {
    s << indent << "num_target: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_target);
    s << indent << "num_points[]" << std::endl;
    for (size_t i = 0; i < v.num_points.size(); ++i)
    {
      s << indent << "  num_points[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.num_points[i]);
    }
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roborts_msgs::FVector_<ContainerAllocator> >::stream(s, indent + "    ", v.pose[i]);
    }
    s << indent << "confidence[]" << std::endl;
    for (size_t i = 0; i < v.confidence.size(); ++i)
    {
      s << indent << "  confidence[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.confidence[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBORTS_MSGS_MESSAGE_LASERTARGET_H
