# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roborts_msgs/ArmorPos.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ArmorPos(genpy.Message):
  _md5sum = "7c1653860dd6778fef70d70be834958c"
  _type = "roborts_msgs/ArmorPos"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool is_valid
float64 x
float64 y
float64 z
float64 distance
float64[] pose_in_gimbal
float64[] vertex
float64[] motion_vec
"""
  __slots__ = ['is_valid','x','y','z','distance','pose_in_gimbal','vertex','motion_vec']
  _slot_types = ['bool','float64','float64','float64','float64','float64[]','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_valid,x,y,z,distance,pose_in_gimbal,vertex,motion_vec

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArmorPos, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_valid is None:
        self.is_valid = False
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.distance is None:
        self.distance = 0.
      if self.pose_in_gimbal is None:
        self.pose_in_gimbal = []
      if self.vertex is None:
        self.vertex = []
      if self.motion_vec is None:
        self.motion_vec = []
    else:
      self.is_valid = False
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.distance = 0.
      self.pose_in_gimbal = []
      self.vertex = []
      self.motion_vec = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B4d().pack(_x.is_valid, _x.x, _x.y, _x.z, _x.distance))
      length = len(self.pose_in_gimbal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.pose_in_gimbal))
      length = len(self.vertex)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.vertex))
      length = len(self.motion_vec)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.motion_vec))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.is_valid, _x.x, _x.y, _x.z, _x.distance,) = _get_struct_B4d().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pose_in_gimbal = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vertex = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motion_vec = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B4d().pack(_x.is_valid, _x.x, _x.y, _x.z, _x.distance))
      length = len(self.pose_in_gimbal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.pose_in_gimbal.tostring())
      length = len(self.vertex)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.vertex.tostring())
      length = len(self.motion_vec)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motion_vec.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.is_valid, _x.x, _x.y, _x.z, _x.distance,) = _get_struct_B4d().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pose_in_gimbal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vertex = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motion_vec = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B4d = None
def _get_struct_B4d():
    global _struct_B4d
    if _struct_B4d is None:
        _struct_B4d = struct.Struct("<B4d")
    return _struct_B4d
