# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roborts_msgs/FusionTarget.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import roborts_msgs.msg

class FusionTarget(genpy.Message):
  _md5sum = "4b446fdc6c26040d3eceffafbf5e0975"
  _type = "roborts_msgs/FusionTarget"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 num_id_target
uint8 num_no_id_target
Target[] id_targets
Target[] no_id_targets

================================================================================
MSG: roborts_msgs/Target
uint8 id
uint8 state
uint8 sensor
float32 x
float32 y
float32 confidence
"""
  __slots__ = ['num_id_target','num_no_id_target','id_targets','no_id_targets']
  _slot_types = ['uint8','uint8','roborts_msgs/Target[]','roborts_msgs/Target[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       num_id_target,num_no_id_target,id_targets,no_id_targets

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FusionTarget, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.num_id_target is None:
        self.num_id_target = 0
      if self.num_no_id_target is None:
        self.num_no_id_target = 0
      if self.id_targets is None:
        self.id_targets = []
      if self.no_id_targets is None:
        self.no_id_targets = []
    else:
      self.num_id_target = 0
      self.num_no_id_target = 0
      self.id_targets = []
      self.no_id_targets = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.num_id_target, _x.num_no_id_target))
      length = len(self.id_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.id_targets:
        _x = val1
        buff.write(_get_struct_3B3f().pack(_x.id, _x.state, _x.sensor, _x.x, _x.y, _x.confidence))
      length = len(self.no_id_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.no_id_targets:
        _x = val1
        buff.write(_get_struct_3B3f().pack(_x.id, _x.state, _x.sensor, _x.x, _x.y, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.id_targets is None:
        self.id_targets = None
      if self.no_id_targets is None:
        self.no_id_targets = None
      end = 0
      _x = self
      start = end
      end += 2
      (_x.num_id_target, _x.num_no_id_target,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.id_targets = []
      for i in range(0, length):
        val1 = roborts_msgs.msg.Target()
        _x = val1
        start = end
        end += 15
        (_x.id, _x.state, _x.sensor, _x.x, _x.y, _x.confidence,) = _get_struct_3B3f().unpack(str[start:end])
        self.id_targets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.no_id_targets = []
      for i in range(0, length):
        val1 = roborts_msgs.msg.Target()
        _x = val1
        start = end
        end += 15
        (_x.id, _x.state, _x.sensor, _x.x, _x.y, _x.confidence,) = _get_struct_3B3f().unpack(str[start:end])
        self.no_id_targets.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.num_id_target, _x.num_no_id_target))
      length = len(self.id_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.id_targets:
        _x = val1
        buff.write(_get_struct_3B3f().pack(_x.id, _x.state, _x.sensor, _x.x, _x.y, _x.confidence))
      length = len(self.no_id_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.no_id_targets:
        _x = val1
        buff.write(_get_struct_3B3f().pack(_x.id, _x.state, _x.sensor, _x.x, _x.y, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.id_targets is None:
        self.id_targets = None
      if self.no_id_targets is None:
        self.no_id_targets = None
      end = 0
      _x = self
      start = end
      end += 2
      (_x.num_id_target, _x.num_no_id_target,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.id_targets = []
      for i in range(0, length):
        val1 = roborts_msgs.msg.Target()
        _x = val1
        start = end
        end += 15
        (_x.id, _x.state, _x.sensor, _x.x, _x.y, _x.confidence,) = _get_struct_3B3f().unpack(str[start:end])
        self.id_targets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.no_id_targets = []
      for i in range(0, length):
        val1 = roborts_msgs.msg.Target()
        _x = val1
        start = end
        end += 15
        (_x.id, _x.state, _x.sensor, _x.x, _x.y, _x.confidence,) = _get_struct_3B3f().unpack(str[start:end])
        self.no_id_targets.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3B3f = None
def _get_struct_3B3f():
    global _struct_3B3f
    if _struct_3B3f is None:
        _struct_3B3f = struct.Struct("<3B3f")
    return _struct_3B3f
