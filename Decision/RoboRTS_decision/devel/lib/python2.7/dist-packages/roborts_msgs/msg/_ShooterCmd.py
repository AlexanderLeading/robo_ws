# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roborts_msgs/ShooterCmd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ShooterCmd(genpy.Message):
  _md5sum = "1ce874438e33b75dd468a5f9109af925"
  _type = "roborts_msgs/ShooterCmd"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool is_shoot
uint8 shoot_cmd
uint8 c_shoot_cmd
uint8 fric_wheel_run
uint16 shoot_freq
"""
  __slots__ = ['is_shoot','shoot_cmd','c_shoot_cmd','fric_wheel_run','shoot_freq']
  _slot_types = ['bool','uint8','uint8','uint8','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_shoot,shoot_cmd,c_shoot_cmd,fric_wheel_run,shoot_freq

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ShooterCmd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_shoot is None:
        self.is_shoot = False
      if self.shoot_cmd is None:
        self.shoot_cmd = 0
      if self.c_shoot_cmd is None:
        self.c_shoot_cmd = 0
      if self.fric_wheel_run is None:
        self.fric_wheel_run = 0
      if self.shoot_freq is None:
        self.shoot_freq = 0
    else:
      self.is_shoot = False
      self.shoot_cmd = 0
      self.c_shoot_cmd = 0
      self.fric_wheel_run = 0
      self.shoot_freq = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4BH().pack(_x.is_shoot, _x.shoot_cmd, _x.c_shoot_cmd, _x.fric_wheel_run, _x.shoot_freq))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.is_shoot, _x.shoot_cmd, _x.c_shoot_cmd, _x.fric_wheel_run, _x.shoot_freq,) = _get_struct_4BH().unpack(str[start:end])
      self.is_shoot = bool(self.is_shoot)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4BH().pack(_x.is_shoot, _x.shoot_cmd, _x.c_shoot_cmd, _x.fric_wheel_run, _x.shoot_freq))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.is_shoot, _x.shoot_cmd, _x.c_shoot_cmd, _x.fric_wheel_run, _x.shoot_freq,) = _get_struct_4BH().unpack(str[start:end])
      self.is_shoot = bool(self.is_shoot)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4BH = None
def _get_struct_4BH():
    global _struct_4BH
    if _struct_4BH is None:
        _struct_4BH = struct.Struct("<4BH")
    return _struct_4BH
